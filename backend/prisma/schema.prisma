generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Use the DATABASE_URL environment variable
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  carts     Cart[]    // One user can have many carts
  orders    Order[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Restaurant {
  id          String          @id @default(uuid())
  name        String
  description String?
  logo        String?         // URL to logo image
  themeColor  String?         // Primary color for the restaurant's theme
  bgColor     String?         // Background color for the restaurant's menu
  taxRate     Float           @default(0.14) // Default tax rate (14%)
  menuItems   MenuItem[]
  tables      Table[]
  orders      Order[]         // Relation to orders
  carts       Cart[]          // Relation to carts
  tableSessions TableSession[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model MenuItem {
  id           String     @id @default(uuid())
  name         String
  description  String?
  price        Float
  image        String?    // URL to item image
  category     String     // e.g., "Appetizers", "Main Course", "Desserts"
  isAvailable  Boolean    @default(true)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orderItems   OrderItem[] // Relation to order items
  cartItems    CartItem[] // Relation to cart items
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Table {
  id             String         @id @default(uuid())
  tableNumber    Int
  qrCode         String         // URL or unique identifier for the QR code
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId   String
  orders         Order[]        // Relation to orders
  tableSessions  TableSession[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([restaurantId, tableNumber]) // Ensure table numbers are unique within a restaurant
}

// New model to group orders by table session
model TableSession {
  id             String         @id @default(uuid())
  isActive       Boolean        @default(true)
  isPaid         Boolean        @default(false)
  table          Table          @relation(fields: [tableId], references: [id])
  tableId        String
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId   String
  orders         Order[]
  payments       Payment[]
  totalAmount    Float?         // Total amount for the session (calculated)
  taxAmount      Float?         // Tax amount for the session
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// Updated Order model
model Order {
  id                String        @id @default(uuid())
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(UNPAID)
  splitMethod       SplitMethod?  // Method used for bill splitting
  total             Float
  taxAmount         Float?        // Tax amount for this order
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  restaurant        Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId      String
  table             Table         @relation(fields: [tableId], references: [id])
  tableId           String
  tableSession      TableSession? @relation(fields: [tableSessionId], references: [id])
  tableSessionId    String?
  items             OrderItem[]   // Relation to order items
  payment           Payment?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model OrderItem {
  id          String   @id @default(uuid())
  quantity    Int
  price       Float    // Price at time of order
  specialNote String?  // For modifications/comments about the item
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAYMENT_PENDING
  PAID
  REFUNDED
  FAILED
  WAITING_CASH_CONFIRMATION
}

enum SplitMethod {
  BY_ORDER
  EVENLY
  PAY_ALL
}

enum PaymentMethod {
  CASH
  CARD
}

// New model for payment tracking
model Payment {
  id              String        @id @default(uuid())
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PAYMENT_PENDING)
  reference       String?       // Payment gateway reference
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         String        @unique
  tableSession    TableSession? @relation(fields: [tableSessionId], references: [id])
  tableSessionId  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Cart {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  items        CartItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, restaurantId])  // Each user can have only one cart per restaurant
}

model CartItem {
  id          String    @id @default(uuid())
  quantity    Int
  specialNote String?
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      String
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}